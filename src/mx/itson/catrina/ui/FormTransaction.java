/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mx.itson.catrina.ui;

import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import javax.swing.table.DefaultTableModel;
import mx.itson.catrina.entities.Account;
import mx.itson.catrina.entities.Transaction;
import mx.itson.catrina.enums.TypeTransactions;

/**
 *
 * @author vagui
 */
public class FormTransaction extends javax.swing.JFrame {

    /**
     * Declara una variable, del tipo DefaultTableModel.DefaultTableModel es una
     * clase en Swing que proporciona un modelo de datos para tablas.
     */
    private DefaultTableModel originalTransactionsModel;

    /**
     * Creates new form FormCuenta
     */
    public FormTransaction() {
        initComponents();
        //Llama a un método, que se encarga de poblar un JComboBox
        fillMonthComboBox();
        //Inicializa la variable originalTransactionsModel con un nuevo objeto DefaultTableModel.
        originalTransactionsModel = new DefaultTableModel();
    }

    /**
     * Este método es privado y no devuelve ningún valor. Se encarga de poblar
     * un JComboBox con información relacionada con los meses. crea un objeto
     * que almacena elementos de tipo String se utiliza para gestionar los
     * elementos del ComboBox
     */
    private void fillMonthComboBox() {
        DefaultComboBoxModel<String> comboBoxModel = new DefaultComboBoxModel<>();
        comboBoxModel.addElement("AllMonths"); // Agrega la opción "AllMonths" al JComboBox
        Set<String> meses = new HashSet<>();//Crea un conjunto (HashSet) llamado meses para almacenar los meses únicos.

        // Llena el conjunto de meses
        for (int i = 0; i < tblTransactions.getRowCount(); i++) {
            String fecha = (String) tblTransactions.getValueAt(i, 0);
            String mes = fecha.split("-")[1];
            meses.add(mes);
        }

        // Agrega los meses al JComboBox
        for (String mes : meses) {
            comboBoxModel.addElement(mes);
        }

        // Asigna el modelo del JComboBox al objeto comboBoxModel que se ha 
        //estado construyendo. Esto establece los elementos que se mostrarán en el JComboBox.
        cbxMes.setModel(comboBoxModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblName = new javax.swing.JLabel();
        btnAgregar = new javax.swing.JButton();
        cbxMes = new javax.swing.JComboBox<>();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lblRFC = new javax.swing.JLabel();
        lblDireccion = new javax.swing.JLabel();
        lblZipCode = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        lblAccount = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblClabe = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblCurrency = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        lblDeposits = new javax.swing.JLabel();
        lblWithdrawals = new javax.swing.JLabel();
        lblFinal = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTransactions = new javax.swing.JTable();
        jLabel19 = new javax.swing.JLabel();
        lblFinalBalance = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblName.setBackground(new java.awt.Color(255, 153, 0));
        lblName.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        lblName.setForeground(new java.awt.Color(0, 0, 0));
        lblName.setText("NAME");
        lblName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lblName.setOpaque(true);

        btnAgregar.setText("Agregar archivo");
        btnAgregar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarActionPerformed(evt);
            }
        });

        cbxMes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbxMesActionPerformed(evt);
            }
        });

        jPanel1.setBackground(new java.awt.Color(255, 204, 0));

        jLabel1.setFont(new java.awt.Font("sansserif", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ESTADO DE CUENTA");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(16, 16, 16))
        );

        lblRFC.setForeground(new java.awt.Color(0, 0, 0));
        lblRFC.setText("RFC");
        lblRFC.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblDireccion.setForeground(new java.awt.Color(0, 0, 0));
        lblDireccion.setText("DIRECCION");
        lblDireccion.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblZipCode.setForeground(new java.awt.Color(0, 0, 0));
        lblZipCode.setText("ZIP CODE");
        lblZipCode.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setBackground(new java.awt.Color(255, 153, 0));
        jLabel5.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(0, 0, 0));
        jLabel5.setText("ACCOUNT STATEMENT");
        jLabel5.setOpaque(true);

        lblAccount.setForeground(new java.awt.Color(0, 0, 0));
        lblAccount.setText("no.cuenta");
        lblAccount.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel6.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(0, 0, 0));
        jLabel6.setText("ACCOUNT");
        jLabel6.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel7.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(0, 0, 0));
        jLabel7.setText("CLABE");
        jLabel7.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblClabe.setForeground(new java.awt.Color(0, 0, 0));
        lblClabe.setText("no.clabe");
        lblClabe.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel9.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(0, 0, 0));
        jLabel9.setText("CURRENCY");
        jLabel9.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblCurrency.setForeground(new java.awt.Color(0, 0, 0));
        lblCurrency.setText("moneda");
        lblCurrency.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel11.setBackground(new java.awt.Color(204, 204, 0));
        jLabel11.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(0, 0, 0));
        jLabel11.setText("PERIOD SUMMARY");
        jLabel11.setOpaque(true);

        jLabel12.setForeground(new java.awt.Color(0, 0, 0));
        jLabel12.setText("Deposits");
        jLabel12.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel13.setForeground(new java.awt.Color(0, 0, 0));
        jLabel13.setText("Withdrawals");
        jLabel13.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel14.setForeground(new java.awt.Color(0, 0, 0));
        jLabel14.setText("Final balance");
        jLabel14.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblDeposits.setForeground(new java.awt.Color(0, 0, 0));
        lblDeposits.setText("jLabel15");
        lblDeposits.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblWithdrawals.setForeground(new java.awt.Color(0, 0, 0));
        lblWithdrawals.setText("jLabel16");
        lblWithdrawals.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lblFinal.setForeground(new java.awt.Color(0, 0, 0));
        lblFinal.setText("jLabel17");
        lblFinal.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel18.setBackground(new java.awt.Color(204, 204, 0));
        jLabel18.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel18.setForeground(new java.awt.Color(0, 0, 0));
        jLabel18.setText("TRANSACTIONS");
        jLabel18.setOpaque(true);

        tblTransactions.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "DATE", "DESCRIPTION", "DEPOSITS", "WITHDRAWALS", "SUBTOTAL"
            }
        ));
        jScrollPane1.setViewportView(tblTransactions);

        jLabel19.setBackground(new java.awt.Color(204, 204, 0));
        jLabel19.setFont(new java.awt.Font("sansserif", 1, 12)); // NOI18N
        jLabel19.setForeground(new java.awt.Color(0, 0, 0));
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("FINAL BALANCE");
        jLabel19.setOpaque(true);

        lblFinalBalance.setBackground(new java.awt.Color(204, 204, 0));
        lblFinalBalance.setForeground(new java.awt.Color(0, 0, 0));
        lblFinalBalance.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblFinalBalance.setText("$");
        lblFinalBalance.setOpaque(true);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cbxMes, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnAgregar, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblRFC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblZipCode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lblDireccion, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE))
                        .addGap(138, 138, 138)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel9)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(lblCurrency, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(lblAccount, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                                    .addComponent(lblClabe, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 210, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblWithdrawals, javax.swing.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                                .addComponent(lblFinal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(lblDeposits, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblFinalBalance, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregar)
                    .addComponent(cbxMes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblName)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblRFC)
                    .addComponent(lblAccount)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDireccion)
                    .addComponent(jLabel7)
                    .addComponent(lblClabe))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblZipCode)
                    .addComponent(jLabel9)
                    .addComponent(lblCurrency))
                .addGap(18, 18, 18)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(lblDeposits))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(lblWithdrawals))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(lblFinal))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel18)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(lblFinalBalance))
                .addContainerGap(27, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnAgregarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarActionPerformed
        // TODO add your handling code here:
        double deposit = 0;
        double withdrawal = 0;
        double saldo = 0;
        /**
         * Esta parte sirve para analizar el archivo json y comvertilo a tipo
         * byte y luego a datos en la deserezeda
         *
         */

        try {
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
            if (fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                byte fileBytes[] = Files.readAllBytes(file.toPath());
                String content = new String(fileBytes, StandardCharsets.UTF_8);
                Account account = new Account().deserealize(content);

                /**
                 * Esta parte empieza ya a llenar los valores del json siempre y
                 * cuando no se encuentre vacio
                 */
                if (account != null) {
                    lblAccount.setText(account.getAccount());
                    lblClabe.setText(account.getClabe());
                    lblCurrency.setText(account.getCurrency());
                    lblName.setText(account.getCustomer().getName());
                    lblRFC.setText("RFC: " + account.getCustomer().getRfc());
                    lblDireccion.setText(account.getCustomer().getAddress());
                    lblZipCode.setText(account.getCustomer().getZip_code());

                    /**
                     * Comenzamos a llenar o "crear "la tabla desde la fila 0
                     * ademas utilizando los metodos del format para la fecha y
                     * los valores numericos
                     */
                    DefaultTableModel transactionsModel = (DefaultTableModel) tblTransactions.getModel();
                    transactionsModel.setRowCount(0);
                    DecimalFormat decimalFormat = new DecimalFormat("##.##");//Sirve para dar formato de numero a dos decimales y no a toda la escala del double
                    SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MMMM-yyyy");// sirve para dar formato de la fecha de dia a dos digitos, nombre del mes y el año a 4 digitos

                    //Ordenar los datos de las transacciones por fecha del mas antiguo al mas reciente (orden ascendente)
                    List<Transaction> orderTransactions = new ArrayList<>(account.getTransactions()); // obtiene la lista de transacciones desde el objeto account.
                    Collections.sort(orderTransactions, (t1, t2) -> t1.getDate().compareTo(t2.getDate()));
                    /**
                     * Collections.sort es un método estático proporcionado por
                     * la clase Collections se utiliza para ordenar la lista
                     * orderTransactions. (t1, t2) ->
                     * t1.getDate().compareTo(t2.getDate()) es una expresión
                     * lambda(es una forma de representar una función anónima
                     * (sin nombre) que puede ser pasada como argumento a
                     * métodos o asignada a variables.) que proporciona un
                     * criterio de comparación personalizado para las
                     * transacciones. compareTo de Date se utiliza para comparar
                     * las fechas de las transacciones (t1.getDate() y
                     * t2.getDate()), y así determinar el orden en el que deben
                     * aparecer en la lista.
                     */

                    for (Transaction transaction : orderTransactions) {
                        String formateDate = dateFormat.format(transaction.getDate());
                        if (transaction.getType() == TypeTransactions.DEPOSITS) {
                            deposit += transaction.getAmount();//suma la cantidad si es de tipo deposito
                        } else {
                            withdrawal += transaction.getAmount();//suma la cantidad si es retiro
                        }
                        saldo = deposit - withdrawal; // se hace el balance final
                        transactionsModel.addRow(new Object[]{
                            formateDate,
                            transaction.getDescription(),
                            transaction.getType() == TypeTransactions.DEPOSITS ? decimalFormat.format(transaction.getAmount()) : "",//se llena el tipo deposito
                            transaction.getType() == TypeTransactions.WITHDRAWAL ? decimalFormat.format(transaction.getAmount()) : "",//se llena el tipo retiro
                            decimalFormat.format(saldo)

                        /*
                                agrega una nueva fila a la tabla (transactionsModel). Esta fila contiene información sobre la transacción actual, 
                                incluyendo la fecha formateada, la descripción de la transacción, la cantidad (si es un depósito), la cantidad 
                                (si es un retiro) y el saldo actual.
                         */
                        }
                        );
                    }
                    String formattedDeposito = decimalFormat.format(deposit);
                    String formattedRetiro = decimalFormat.format(withdrawal);
                    String formattedBalance = decimalFormat.format(deposit - withdrawal);

                    lblDeposits.setText(formattedDeposito);
                    lblWithdrawals.setText(formattedRetiro);
                    lblFinal.setText(formattedBalance);
                    lblFinalBalance.setText(formattedBalance);

                    originalTransactionsModel = (DefaultTableModel) tblTransactions.getModel(); // Actualiza originalTransactionsModel
                    fillMonthComboBox();
                }
            }
        } catch (IOException ex) {
            System.err.println("Ocurrio un error: " + ex);
        }
    }//GEN-LAST:event_btnAgregarActionPerformed

    private void cbxMesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbxMesActionPerformed
        String mesSeleccionado = (String) cbxMes.getSelectedItem();

        // Verifica si el mes seleccionado es "AllMonths".
        if ("AllMonths".equals(mesSeleccionado)) {
            // Si es verdadero, establece el modelo de la tabla (tblTransactions) con el modelo original (originalTransactionsModel).
            //es decir llena la tabla como es, sin modificaciones, todos los datos
            tblTransactions.setModel(originalTransactionsModel);
        } else {
            // Si el mes seleccionado no es "AllMonths".
            if (originalTransactionsModel != null) {
                // Filtra la tabla por el mes seleccionado.
                // Crea un nuevo modelo de tabla (filteredModel) con columnas específicas.
                DefaultTableModel filteredModel = new DefaultTableModel();
                filteredModel.setColumnIdentifiers(new Object[]{"Date", "Description", "Deposit", "Withdrawal", "Subtotal"});

                // Recorre las filas del modelo original de la tabla.
                for (int i = 0; i < originalTransactionsModel.getRowCount(); i++) {
                    // Obtiene la fecha de la i-ésima fila y extrae el mes.
                    String fecha = (String) originalTransactionsModel.getValueAt(i, 0);
                    String mes = fecha.split("-")[1];

                    // Compara el mes extraído con el mes seleccionado.
                    if (mes.equals(mesSeleccionado)) {
                        // Si son iguales, agrega la fila al modelo filtrado.
                        filteredModel.addRow(new Object[]{
                            originalTransactionsModel.getValueAt(i, 0),
                            originalTransactionsModel.getValueAt(i, 1),
                            originalTransactionsModel.getValueAt(i, 2),
                            originalTransactionsModel.getValueAt(i, 3),
                            originalTransactionsModel.getValueAt(i, 4)
                        });
                    }
                }

                // Establece el modelo de la tabla (tblTransactions) con el modelo filtrado.
                tblTransactions.setModel(filteredModel);
            }
        }

    }//GEN-LAST:event_cbxMesActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormTransaction.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormTransaction().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAgregar;
    private javax.swing.JComboBox<String> cbxMes;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAccount;
    private javax.swing.JLabel lblClabe;
    private javax.swing.JLabel lblCurrency;
    private javax.swing.JLabel lblDeposits;
    private javax.swing.JLabel lblDireccion;
    private javax.swing.JLabel lblFinal;
    private javax.swing.JLabel lblFinalBalance;
    private javax.swing.JLabel lblName;
    private javax.swing.JLabel lblRFC;
    private javax.swing.JLabel lblWithdrawals;
    private javax.swing.JLabel lblZipCode;
    private javax.swing.JTable tblTransactions;
    // End of variables declaration//GEN-END:variables

}
